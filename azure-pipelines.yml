trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

stages:
# ===============================
# 1️⃣  Build Stage
# ===============================
- stage: Build
  displayName: "Build and Test"
  jobs:
  - job: Build
    displayName: "Install dependencies and run tests"
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.10'
      displayName: "Set up Python 3.10"

    - script: |
        pip install -r app/requirements.txt
      displayName: "Install Python dependencies"

    - script: |
        echo "Running tests..."
        # pytest or any placeholder test command can go here
      displayName: "Run unit tests"

# ===============================
# 2️⃣  Deploy Stage
# ===============================
- stage: Deploy
  displayName: "Provision Infrastructure and Deploy"
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: "Deploy resources with Terraform"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: Docker@2
      inputs:
        containerRegistry: 'my-docker-sc'
        repository: 'pywebappdev'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'

    # Install Terraform using the official task
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: '1.8.5'
      displayName: "Install Terraform"

    # Authenticate with Azure using your service connection
    - task: AzureCLI@2
      displayName: 'Run Terraform (Terraform Cloud backend)'
      inputs:
        azureSubscription: 'my-azure-sc'  # Azure service connection name
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          echo "Initializing and applying Terraform configuration..."
          mkdir -p ~/.terraform.d
          echo '{"credentials":{"app.terraform.io":{"token":"'$TF_API_TOKEN'"}}}' > ~/.terraform.d/credentials.tfrc.json


          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
      env:
        TF_API_TOKEN: $(TERRAFORM_CLOUD_TOKEN)  # Secret variable from Azure DevOps
        ARM_CLIENT_ID: $(servicePrincipalId)
        ARM_CLIENT_SECRET: $(servicePrincipalKey)
        ARM_SUBSCRIPTION_ID: $(subscriptionId)
        ARM_TENANT_ID: $(tenantId)


    - task: AzureRmWebAppDeployment@5
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'my-azure-sc'
        appType: 'webAppContainer'
        WebAppName: 'devopsdemo-webapp'
        DockerNamespace: 'demoprojectn.azurecr.io'
        DockerRepository: 'hj'
    - script: |
        echo "Deployment completed successfully!"
      displayName: "Confirm Deployment"
